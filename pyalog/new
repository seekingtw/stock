import sys
#sys.path.append("pyalgotrade-develop")
from pyalgotrade import strategy
from pyalgotrade import plotter
from pyalgotrade.tools import quandl
from pyalgotrade.technical import bollinger
from pyalgotrade.stratanalyzer import sharpe
from pyalgotrade import broker as basebroker
from pyalgotrade import plotter
from pyalgotrade.technical import bollinger
from pyalgotrade.technical import cross
from trend import *
class baseSignal:
    def __init__(self):
        pass
    def long_signal(self):
        pass
    def short_signal(self):
        pass
    def is_long(self):
        pass
    def is_short(self):
        pass
'''
def treand_check(list):
    if len(list) > 20:
        max_pre = max(list[-1-19:-1+5-19])
        max_now = max(list[-5:])
        if max_pre == None or max_now == None:
            return -1
        print ("max now ", max_now," max prev" , max_pre," ratio ",(max_now-max_pre)/max_pre)
        if (max_now - max_pre)/max_pre  >0.05:
            return 1
        elif  (max_now - max_pre)/max_pre  <0:
            return -1
        elif  (max_now - max_pre)/max_pre  <-0.05:
            return -2
        else :
            return 0
    else:
        return 0

'''


class BBand_strategy(baseSignal):
    def __init__(self, strategy,feed, instrument, bBandsPeriod):
        self.__instrument = instrument
        self.__prices = feed[instrument].getPriceDataSeries()
        self.__position = None#remove later
        self.__bbands = bollinger.BollingerBands(feed[instrument].getCloseDataSeries(), bBandsPeriod, 2)
        #self.__bbands = bollinger.BollingerBands(feed[instrument].getCloseDataSeries(), bBandsPeriod, 1)
        self.__strategy= strategy
        self.__trend = TrendRatio(self.__prices,20)
        self.plot_init(True)
    def getBollingerBands(self):
        return self.__bbands

    def onOrderUpdated(self, order):
        if order.isBuy():
            orderType = "Buy"
        else:
            orderType = "Sell"
        self.info("%s order %d updated - Status: %s" % (
            orderType, order.getId(), basebroker.Order.State.toString(order.getState())
        ))
        #self.info("%d positions, %d values" %(self.__position.getShares() ,self.getBroker().getEquity()) )
    import sys
    def list_info(self,name, list,times):
        sys.stdout.write(name+":")
        for i in range(-1,-1-times,-1):
            sys.stdout.write(str(list[i]))
            sys.stdout.write(" ")
        sys.stdout.write("\n")
        pass
    def long(self, bars):
        global list_info
        lower = self.__bbands.getLowerBand()[-1]
        upper = self.__bbands.getUpperBand()[-1]
        ma=  self.getBollingerBands().getMiddleBand()
        low = self.__bbands.getLowerBand()
        high=self.__bbands.getUpperBand()
        prices=self.__prices
        if lower is None:
            return False
        if cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and self.__trend.trend_current_ratio() >=0:
        #if  cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and self.__trend.trend_current() != 'down':
        #if  cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and trend_ratio(ma) >-1:
        #if cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and prices[-1] - prices[-3] > 0:
        #if cross.cross_above(self.__prices, self.__bbands.getLowerBand()) :#and prices[-1] - prices[-5] > 0:
        #if bars[self.__instrument].getClose() < lower:
            #if cross.cross_above(self.__prices,self.__bbands.getLowerBand() ):
            #if self.getBollingerBands().getMiddleBand()[-1-1] and   (self.getBollingerBands().getMiddleBand()[-1] -  self.getBollingerBands().getMiddleBand()[-1-1] ) > 0 :# add trade
            #print ("ma",ma[-1],ma[-2],ma[-3])
            #print ("low",low[-1],low[-2],low[-3])
            #print ("high",high[-1],high[-2],high[-3])
            #print ("price",prices[-1],prices[-2],prices[-3])
            print bars.getDateTime()
            self.list_info("ma",ma,5)
            self.list_info("low", low, 5)
            self.list_info("high", high, 5)
            self.list_info("price", prices, 5)
            return True
        return False
        # Check if we have to exit the position.

    def long2(self, bars):
        global list_info
        lower = self.__bbands.getLowerBand()[-1]
        upper = self.__bbands.getUpperBand()[-1]
        ma=  self.getBollingerBands().getMiddleBand()
        low = self.__bbands.getLowerBand()
        high=self.__bbands.getUpperBand()
        prices=self.__prices
        if lower is None:
            return False
        if cross.cross_above(self.__prices, ma) and self.__trend.trend_current_ratio() >=0:
        #if  cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and self.__trend.trend_current() != 'down':
        #if  cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and trend_ratio(ma) >-1:
        #if cross.cross_above(self.__prices, self.__bbands.getLowerBand()) and prices[-1] - prices[-3] > 0:
        #if cross.cross_above(self.__prices, self.__bbands.getLowerBand()) :#and prices[-1] - prices[-5] > 0:
        #if bars[self.__instrument].getClose() < lower:
            #if cross.cross_above(self.__prices,self.__bbands.getLowerBand() ):
            #if self.getBollingerBands().getMiddleBand()[-1-1] and   (self.getBollingerBands().getMiddleBand()[-1] -  self.getBollingerBands().getMiddleBand()[-1-1] ) > 0 :# add trade
            #print ("ma",ma[-1],ma[-2],ma[-3])
            #print ("low",low[-1],low[-2],low[-3])
            #print ("high",high[-1],high[-2],high[-3])
            #print ("price",prices[-1],prices[-2],prices[-3])
            print bars.getDateTime()
            self.list_info("ma",ma,5)
            self.list_info("low", low, 5)
            self.list_info("high", high, 5)
            self.list_info("price", prices, 5)
            return True
        return False
        # Check if we have to exit the position.

    def short(self, bars):
        lower = self.__bbands.getLowerBand()[-1]
        upper = self.__bbands.getUpperBand()[-1]
        prices = self.__prices
        if upper is None:
            return False
        #if bars[self.__instrument].getClose() > upper:
        #if cross.cross_below(self.__prices, self.__bbands.getUpperBand()):
        #if cross.cross_below(self.__prices, self.__bbands.getUpperBand()) or treand_check(prices) <= -1:
        #if cross.cross_below(self.__prices, self.__bbands.getUpperBand()) or  self.__trend.trend_current() == 'down':
        if cross.cross_below(self.__prices, self.__bbands.getUpperBand()) or self.__trend.trend_current_ratio() < 0 :
            return True
        return False


    def plot_init(self, plot):
        if plot:  # plot:
            self.plt = plotter.StrategyPlotter(self.__strategy, True, True, True)
            self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("upper", self.getBollingerBands().getUpperBand())
            self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("middle",
                                                                           self.getBollingerBands().getMiddleBand())
            self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("lower", self.getBollingerBands().getLowerBand())
            self.plt.getOrCreateSubplot("trend").addDataSeries("tend", self.__trend.getTrend())
        pass


    def plot_show(self):
        self.plt.plot()
        pass

'''
    def onBars(self, bars):
        lower = self.__bbands.getLowerBand()[-1]
        upper = self.__bbands.getUpperBand()[-1]
        if lower is None:
            return

        shares = self.getBroker().getShares(self.__instrument)
        bar = bars[self.__instrument]
        if shares == 0 and bar.getClose() < lower:
            sharesToBuy = int(self.getBroker().getCash(False) / bar.getClose())
            self.info("Placing buy market order for %s shares" % sharesToBuy)
            self.marketOrder(self.__instrument, sharesToBuy)
        elif shares > 0 and bar.getClose() > upper:
            self.info("Placing sell market order for %s shares" % shares)
            self.marketOrder(self.__instrument, -1*shares)
'''


from pyalgotrade import strategy
from pyalgotrade import plotter
from pyalgotrade.tools import quandl
from pyalgotrade.technical import bollinger
from pyalgotrade.stratanalyzer import sharpe
from pyalgotrade import broker as basebroker
from pyalgotrade import plotter
from pyalgotrade.technical import bollinger
from pyalgotrade.technical import cross
from pyalgotrade.technical import ma
from trend import *
class baseSignal:
    def __init__(self):
        pass
    def long_signal(self):
        pass
    def short_signal(self):
        pass
    def is_long(self):
        pass
    def is_short(self):
        pass
    def plot_init(self, plot):
        print ("plot_int is not implemented")

    def plot_show(self):
        print ("plot_show is not implemented")

class DMA_signal(baseSignal):
    def __init__(self,strategy,feed, instrument,fast_period,slow_period):
        self.fast_ma= ma.SMA(feed[instrument].getCloseDataSeries(), fast_period)
        self.fast_period = fast_period

        self.slow_ma = ma.SMA(feed[instrument].getCloseDataSeries(), slow_period)
        self.slow_period = slow_period
        self.__strategy= strategy
        self.__instrument = instrument
        self.__prices = feed[instrument].getPriceDataSeries()
        self.fast__trend = TrendRatio(self.__prices, fast_period)
        self.slow__trend = TrendRatio(self.__prices, slow_period)

        self.plot_init(True)

    def long(self,bars):
        if cross.cross_above(self.fast_ma, self.slow_ma) :#and self.__trend.trend_current_ratio() >=0:
            return True
        return False
        pass
    def short(self,bars):
        if cross.cross_below(self.fast_ma, self.slow_ma) :#and self.__trend.trend_current_ratio() >=0:
            return True
        return False
        pass

    def plot_init(self, plot):
        if plot:  # plot:
            self.plt = plotter.StrategyPlotter(self.__strategy, True, True, True)
            self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("fast_ma", self.fast_ma)
            self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("slow_ma",
                                                                           self.slow_ma)
            self.plt.getOrCreateSubplot("trend").addDataSeries("fast", self.fast__trend.getTrend())
            self.plt.getOrCreateSubplot("trend").addDataSeries("slow", self.slow__trend.getTrend())

        pass


    def plot_show(self):
        self.plt.plot()
        pass


#import sys
#sys.path.append("pyalgotrade-develop")
from pyalgotrade import dataseries
from pyalgotrade.technical import ma
from pyalgotrade import plotter

def average(list):
    try:
        sum(list)
    except:
        return None
    return sum(list)/float(len(list))

def trend_ratio(list,period=20, interval= 5,div=4):
    val = None
    if len(list) > period:
        time_internal = period/div
        avg_prev = average(list[-1-period:-1-(period*(div-1)/div)])
        avg_now = average(list[-1-period/div:])
        if  avg_prev == None:
            val =  None
        else:
            ratio = lambda now,prev: (now-prev)/prev*100/interval
            val = ratio(avg_now, avg_prev)
        #print ("avg now ", avg_now," avg prev" , avg_prev," ratio ",ratio(avg_now,avg_prev))


    else:
        val =  None
    print ("avg now ", avg_now, " avg prev", avg_prev, " ratio ", val)

    return val


class TrendRatio(object):
    def __init__(self,dataSeries, period, div=4,interval=5):
        self.ma= ma.SMA(dataSeries, period)
        self.period = period
        self.div=div
        self.interval =interval
        dataSeries.getNewValueEvent().subscribe(self.__onNewValue)
        self.trend_data = dataseries.SequenceDataSeries()

    def __onNewValue(self, dataSeries, dateTime, value):
        trend_val = None

        if value is not None:
            try :
                if self.ma[-1-self.period] is not None:
                    trend_val = trend_ratio(self.ma,self.period,self.interval,self.div)
            except:
                trend_val = None
                pass
        #if trend_val == None :
        #    trend_val = -100
        self.trend_data.appendWithDateTime(dateTime, trend_val)
    def getTrend(self):
        return self.trend_data


    def plot_init(self, strategy,plot=True):
        self.__strategy = strategy

        if plot:  # plot:
            self.plt = plotter.StrategyPlotter(self.__strategy, True, True, True)
            self.plt.getOrCreateSubplot("trend").addDataSeries("trend", self.trend_data)
        pass


    def plot_show(self):
        self.plt.plot()
        pass

    def trend_type(self,date):
        pass
    def trend_current(self, up_scale=1, down_scale=-1):

        if self.trend_data[-1] > up_scale:
            return 'up'
        if self.trend_data[-1]  < down_scale:
            return 'down'
        if self.trend_data[-1] <= up_scale and self.trend_data[-1] >= down_scale:
            return 'normal'

    def trend_current_ratio(self, up_scale=1, down_scale=-1):

        return  self.trend_data[-1]

class baseSignal:
    def __init__(self):
        pass
    def long_signal(self):
        pass
    def short_signal(self):
        pass
    def is_long(self):
        pass
    def is_short(self):
        pass
    def plot_init(self, plot):
        print ("plot_int is not implemented")

    def plot_show(self):
        print ("plot_show is not implemented")

class trend_signal(baseSignal):
    def __init__(self,strategy,feed, instrument,period):
        self.__strategy= strategy
        self.__instrument = instrument
        self.__prices = feed[instrument].getPriceDataSeries()
        self.trend = TrendRatio(self.__prices, period)

        self.plot_init(True)

    def long(self,bars):
        if self.trend.trend_current_ratio() >0.0:
            return True
        return False
        pass

    def short(self,bars):

        if self.trend.trend_current_ratio() < 0:

            return True
        return False
        pass


    def plot_init(self, plot):
        if plot:  # plot:
            self.plt = plotter.StrategyPlotter(self.__strategy, True, True, True)
            # self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("fast_ma", self.fast_ma)
            # self.plt.getInstrumentSubplot(self.__instrument).addDataSeries("slow_ma",
            #                                                               self.slow_ma)

            self.plt.getOrCreateSubplot("macd").addDataSeries("trend", self.trend.getTrend())

        pass


    def plot_show(self):
        self.plt.plot()
        pass


import sys
sys.path.append("pyalgotrade-develop")

from pyalgotrade import strategy
from pyalgotrade.stratanalyzer import sharpe
from pyalgotrade.barfeed import googlefeed
from trend import TrendRatio

class TechTestor(strategy.BacktestingStrategy):
    def __init__(self, feed, instrument,section_analyzer=None, **kwargs):
        super(TechTestor, self).__init__(feed)
        self.__instrument = instrument
    def onBars(self, bars):
        pass
    def attach_tech(self,tech):
        self.techs=[tech]
    def get_techs(self):
        return self.techs
    pass

def main(sid='2030',start= None,end=None,period=20,plot=False):

    instrument = '2030'
    feed = googlefeed.Feed()

    #feed.setBarFilter(DateRangeFilter(       datetime.strptime("2015-11-1","%Y-%m-%d"),         datetime.strptime("2016-2-1","%Y-%m-%d")))
    #feed.addBarsFromCSV(instrument,"2030.csv")
    feed.addBarsFromCSV(instrument,"tw50_test/1102.csv")
    #execfile('bband_strategy.py',checknamespace)
    #StrategyManager= checknamespace['BBands']
    bBandsPeriod = 20
    strat = TechTestor(feed, instrument,)
    #strat.attach_strategy(MA_Stragtegy(feed,instrument,5))
    strat.attach_tech(TrendRatio(feed[instrument].getCloseDataSeries(),20,4,5))

    sharpeRatioAnalyzer = sharpe.SharpeRatio()
    strat.attachAnalyzer(sharpeRatioAnalyzer)
    strat.get_techs()[0].plot_init(strat)

    strat.run()
    print "Sharpe ratio: %.2f" % sharpeRatioAnalyzer.getSharpeRatio(0.05)

    strat.get_techs()[0].plot_show()
    '''
    execfile('user_strategy.py',checknamespace)
    StrategyManager= checknamespace['StrategyManager']
    section_ana = section_analyzer()
    strat = StrategyManager(feed, instrument,section_ana)

    plt = plotter.StrategyPlotter(strat, True, True, True)
    strat.run()
    #plt.plot()
    section_ana.show()
    '''
    pass

if __name__ == "__main__":
    main()
